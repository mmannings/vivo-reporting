@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:   <http://www.w3.org/2002/07/owl#> .
@prefix vitro: <http://vitro.mannlib.cornell.edu/ns/vitro/0.7#> .
@prefix dynapi: <https://vivoweb.org/ontology/vitro-dynamic-api#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<test:action>
        a                                   dynapi:Procedure ;
        dynapi:hasFirstStep                 <test:step1> ;
        dynapi:providesParameter            <test:report> ;
        dynapi:hasAssignedRPC               <test:rpc1> .

<test:step1>
        a                                   dynapi:Step, dynapi:OperationalStep ;
        rdfs:label                          "step 1"@en-US ;
        dynapi:hasNextStep                  <test:step2> ;
        dynapi:hasOperation                 <test:selectQuery> .

<test:step2>
        a                                   dynapi:Step, dynapi:OperationalStep ;
        rdfs:label                          "step 2"@en-US ;
        dynapi:hasOperation                 <test:reportGenerator> .

<test:selectQuery> 
        a                                   dynapi:SparqlSelectQuery, dynapi:Operation ;
        rdfs:label                          "Test sparql select query"@en-US ;
		dynapi:sparqlQueryText              "SELECT ?uri ?object WHERE { ?uri <test:property> ?object . } " ;
        dynapi:providesParameter            <test:dataSource> ;
        dynapi:hasModel                     <test:query_model> .

<test:reportGenerator> 
        a                                   dynapi:ReportGenerator, dynapi:Operation ;
        rdfs:label                          "Test report generator"@en-US ;
		dynapi:dataSource					<test:dataSource> ;
		dynapi:template						<test:template> ;
        dynapi:report			            <test:report> ;
        dynapi:hasModel                     <test:query_model> .

<test:query_model>
        a                                   dynapi:Parameter, dynapi:Model ;
        rdfs:label                          "query model param"@en-US ;
        dynapi:name                         "querymodel" ;
        dynapi:hasType                      <https://vivoweb.org/ontology/vitro-dynamic-api/parameter/type/model> .

<test:dataSource>
        a                                   dynapi:Parameter;
        rdfs:label                          "output model param"@en-US ;
        dynapi:name                         "dataSource" ;
        dynapi:hasType                      <https://vivoweb.org/ontology/vitro-dynamic-api/parameter/type/json> .



<test:report>
        a                                   dynapi:Parameter ;
        rdfs:label                          "report param"@en-US ;
        dynapi:name                         "report" ;
        dynapi:hasType                      <https://vivoweb.org/ontology/vitro-dynamic-api/parameter/type/binary-file> .

<test:rpc1>
        a                                   dynapi:Rpc ;
        rdfs:label                          "Test rpc create individual"@en-US ;
        dynapi:name                         "test_action" .

<test:template>
        a                                   dynapi:Parameter ;
        rdfs:label                          "template param"@en-US ;
		dynapi:isInternal					"true"^^xsd:boolean ;
        dynapi:name                         "template" ;
        dynapi:hasType                      <https://vivoweb.org/ontology/vitro-dynamic-api/parameter/type/binary-file> ;
		dynapi:defaultValue					"" .


